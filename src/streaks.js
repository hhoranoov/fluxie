import { sendMessage } from './utils';

// –§—É–Ω–∫—Ü—ñ—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ü—ñ–ª—ñ
export async function handleAddStreak(db, TELEGRAM_API_URL, chatId, goalName) {
	if (!goalName) {
		return sendMessage(TELEGRAM_API_URL, chatId, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /streak add <–Ω–∞–∑–≤–∞ —Ü—ñ–ª—ñ>');
	}

  let streaks = await getUserStreaks(db, chatId);

	if (streaks[goalName]) {
		return sendMessage(
			TELEGRAM_API_URL,
			chatId,
			`–¶—ñ–ª—å "${goalName}" –≤–∂–µ —ñ—Å–Ω—É—î. –í–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —ó—ó –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–º–∞–Ω–¥–∏ /streak check.`
		);
	}

	streaks[goalName] = {
		startDate: new Date().toISOString(),
		lastChecked: new Date().toISOString(),
		streakCount: 1,
	};

	await saveUserStreaks(db, chatId, streaks);
	await sendMessage(TELEGRAM_API_URL, chatId, `–¶—ñ–ª—å "${goalName}" –¥–æ–¥–∞–Ω–∞! üéâ`);
}

// –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ü—ñ–ª—ñ
export async function handleCheckStreaks(db, TELEGRAM_API_URL, chatId) {
	let streaks = await getUserStreaks(db, chatId);

	if (Object.keys(streaks).length === 0) {
		return sendMessage(
			TELEGRAM_API_URL,
			chatId,
			'–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö streaks. –î–æ–¥–∞–π—Ç–µ —Ü—ñ–ª—å –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–º–∞–Ω–¥–∏ /streak add <–Ω–∞–∑–≤–∞ —Ü—ñ–ª—ñ>.'
		);
	}

	const now = new Date();
	let streakMessages = [];

	for (const goalName in streaks) {
		const streak = streaks[goalName];
		const lastCheckedDate = new Date(streak.lastChecked);
		const daysSinceLastCheck = Math.floor((now - lastCheckedDate) / (1000 * 60 * 60 * 24));

		if (daysSinceLastCheck > 1) {
			streak.streakCount = 1;
			streak.startDate = now.toISOString();
			streak.lastChecked = now.toISOString();
			await sendMessage(TELEGRAM_API_URL, chatId, `–¶—ñ–ª—å "${goalName}" –∑—ñ—Ä–≤–∞–ª–∞—Å—è. –ù–æ–≤–∞ —Å–ø—Ä–æ–±–∞ –ø–æ—á–∞–ª–∞—Å—è —Å—å–æ–≥–æ–¥–Ω—ñ.`);
		} else if (daysSinceLastCheck === 1) {
			streak.streakCount += 1;
			streak.lastChecked = now.toISOString();
		}

		const startDate = new Date(streak.startDate);
		const streakDuration = Math.floor((now - startDate) / (1000 * 60 * 60 * 24)) + 1;

		streakMessages.push(
			`–¶—ñ–ª—å: *${goalName}*\n–°—Ç–∞—Ä—Ç: *${startDate.toLocaleDateString()}*\n–ü–æ—Ç–æ—á–Ω–∏–π streak: *${
				streak.streakCount
			} –¥–Ω—ñ–≤* (${streakDuration} –¥–Ω—ñ–≤ –±–µ–∑ –ø–µ—Ä–µ—Ä–≤–∏)`
		);
	}

	await saveUserStreaks(db, chatId, streaks);

	const messageText = streakMessages.join('\n\n');
	await sendMessage(TELEGRAM_API_URL, chatId, messageText, { parse_mode: 'Markdown' });
}

// –§—É–Ω–∫—Ü—ñ—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ü—ñ–ª—ñ
export async function handleDeleteStreak(db, TELEGRAM_API_URL, chatId, goalName) {
	if (!goalName) {
		return sendMessage(TELEGRAM_API_URL, chatId, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /streak delete <–Ω–∞–∑–≤–∞ —Ü—ñ–ª—ñ>');
	}

	let streaks = await getUserStreaks(db, chatId);

	if (!streaks[goalName]) {
		return sendMessage(TELEGRAM_API_URL, chatId, `–¶—ñ–ª—å "${goalName}" –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.`);
	}

	delete streaks[goalName];
	await saveUserStreaks(db, chatId, streaks);
	await sendMessage(TELEGRAM_API_URL, chatId, `–¶—ñ–ª—å "${goalName}" –≤–∏–¥–∞–ª–µ–Ω–∞.`);
}

// –§—É–Ω–∫—Ü—ñ—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–ª–µ–π DB
export async function getUserStreaks(db, chatId) {
	const result = await db.prepare('SELECT streaks FROM user_streaks WHERE chat_id = ?').bind(chatId).first();
	return result?.streaks ? JSON.parse(result.streaks) : {};
}

// –§—É–Ω–∫—Ü—ñ—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Ü—ñ–ª–µ–π DB
export async function saveUserStreaks(db, chatId, streaks) {
	await db.prepare('INSERT OR REPLACE INTO user_streaks (chat_id, streaks) VALUES (?, ?)').bind(chatId, JSON.stringify(streaks)).run();
}
