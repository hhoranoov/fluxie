import { handleAddStreak, handleCheckStreaks, handleDeleteStreak } from "./streaks";
import { saveUserData, getUserData, checkServicesAvailability } from "./assistant";
import { sendMessage, saveMessage, deleteMessage } from "./utils";

// –§—É–Ω–∫—Ü—ñ—è —Å—Ç–∞—Ä—Ç—É
export async function handleStartCommand(env, TELEGRAM_API_URL, message) {
	const chatId = message.chat.id;
	const command = 'start';
	const previousRecord = await env.DB.prepare('SELECT message_id FROM bot_messages WHERE chat_id = ? AND command = ?')
		.bind(chatId, command)
		.first();

	if (previousRecord && previousRecord.message_id) {
		try {
			await deleteMessage(TELEGRAM_API_URL, chatId, previousRecord.message_id);
		} catch (error) {
			console.error('–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è /start:', error);
		}
	}

	const userData = (await getUserData(env.DB, message.from.id)) || {};
	const userName = userData.first_name || '–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á';
	const reply = `–ü—Ä–∏–≤—ñ—Ç, ${userName}!`;
	const sentMessage = await sendMessage(TELEGRAM_API_URL, chatId, reply, {});

	await env.DB.prepare('INSERT OR REPLACE INTO bot_messages (chat_id, command, message_id) VALUES (?, ?, ?)')
		.bind(chatId, command, sentMessage.message_id)
		.run();

	await deleteMessage(TELEGRAM_API_URL, chatId, message.message_id);
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–æ–ø–æ–º–æ–≥–∏
export async function handleHelpCommand(env, TELEGRAM_API_URL, message) {
	const chatId = message.chat.id;
	const command = 'help';
	const previousRecord = await env.DB.prepare('SELECT message_id FROM bot_messages WHERE chat_id = ? AND command = ?')
		.bind(chatId, command)
		.first();

	if (previousRecord && previousRecord.message_id) {
		try {
			await deleteMessage(TELEGRAM_API_URL, chatId, previousRecord.message_id);
		} catch (error) {
			console.error('–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è help:', error);
		}
	}

	const reply = `‚úª *–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏*:

üìù *–ó–∞–≤–¥–∞–Ω–Ω—è:*
- /add <–¥–µ–Ω—å> <—á–∞—Å> <–∑–∞–≤–¥–∞–Ω–Ω—è> - –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ –≤–∫–∞–∑–∞–Ω–∏–π –¥–µ–Ω—å —Ç–∞ —á–∞—Å
- /today - –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ
- /tasks <–¥–µ–Ω—å> - –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ –≤–∫–∞–∑–∞–Ω–∏–π –¥–µ–Ω—å

üöÄ *–û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:*
- /start - –ø–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º
- /help - –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ–ø–æ–º–æ–≥—É
- /getid - –æ—Ç—Ä–∏–º–∞—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
- /status - —Ç–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –®–Ü —Å–µ—Ä–≤—ñ—Å—ñ–≤
- /setdata - –¥–æ–¥–∞—Ç–∏ –≤–∞–∂–ª–∏–≤—ñ –¥–∞–Ω—ñ (—ñ–º'—è, —ñ.—Ç.)
- /clear - –æ—á–∏—Å—Ç–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é 

üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
- /stats week - –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Ç–∏–∂–¥–µ–Ω—å
- /stats month - –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –º—ñ—Å—è—Ü—å

üéØ *–¶—ñ–ª—ñ (Streaks):*
- /streak add <–Ω–∞–∑–≤–∞ —Ü—ñ–ª—ñ> - –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤—É —Ü—ñ–ª—å
- /streak check - –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ streaks
- /streak delete <–Ω–∞–∑–≤–∞ —Ü—ñ–ª—ñ> - –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü—ñ–ª—å
`;

	const sentMessage = await sendMessage(TELEGRAM_API_URL, chatId, reply, { parse_mode: 'Markdown' });

	await env.DB.prepare('INSERT OR REPLACE INTO bot_messages (chat_id, command, message_id) VALUES (?, ?, ?)')
		.bind(chatId, command, sentMessage.message_id)
		.run();

	await deleteMessage(TELEGRAM_API_URL, chatId, message.message_id);
}

// –§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ü—ñ–ª—ñ
export async function handleStreakCommand(db, TELEGRAM_API_URL, message) {
	const args = message.text.substring(8).trim().split(' ');
	if (args.length < 1) {
		const reply = '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /streak add <–Ω–∞–∑–≤–∞ —Ü—ñ–ª—ñ>, /streak check –∞–±–æ /streak delete <–Ω–∞–∑–≤–∞ —Ü—ñ–ª—ñ>.';
		await sendMessage(TELEGRAM_API_URL, message.chat.id, reply);
		return;
	}
	const streakCommand = args[0];
	if (streakCommand === 'add') {
		const goalName = args.slice(1).join(' ');
		await handleAddStreak(db, TELEGRAM_API_URL, message.chat.id, goalName);
	} else if (streakCommand === 'check') {
		await handleCheckStreaks(db, TELEGRAM_API_URL, message.chat.id);
	} else if (streakCommand === 'delete') {
		const goalName = args.slice(1).join(' ');
		await handleDeleteStreak(db, TELEGRAM_API_URL, message.chat.id, goalName);
	} else {
		const reply = '–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞ streak. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /streak add <–Ω–∞–∑–≤–∞ —Ü—ñ–ª—ñ>, /streak check –∞–±–æ /streak delete <–Ω–∞–∑–≤–∞ —Ü—ñ–ª—ñ>.';
		await sendMessage(TELEGRAM_API_URL, message.chat.id, reply);
	}
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É
export async function handleStatusCommand(env, TELEGRAM_API_URL, message) {
	const status = await checkServicesAvailability();
	const reply =
		`‚úª *–°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ:*\n\n` +
		`–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–µ–∫—Å—Ç—É: ${status.textGeneration ? 'üíö' : '‚ù§Ô∏è'}\n` +
		`–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–æ–±—Ä–∞–∂–µ–Ω—å: ${status.imageGeneration ? 'üíö' : '‚ù§Ô∏è'}\n` +
		`–†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å: ${status.imageRecognition ? 'üíö' : '‚ù§Ô∏è'}`;

	await sendMessage(TELEGRAM_API_URL, message.chat.id, reply, { parse_mode: 'Markdown' });
	await saveMessage(env.DB, message.from.id, message.chat.id, 'bot', reply);
}

// –§—É–Ω–∫—Ü—ñ—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∞–∂–ª–∏–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
export async function handleSetDataCommand(db, TELEGRAM_API_URL, message) {
	const data = message.text.substring(8).trim();
	if (!data) {
		const reply = '–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥–∞–π—Ç–µ –¥–∞–Ω—ñ –¥–ª—è –∑–∞–ø–∏—Å—É.';
		await sendMessage(TELEGRAM_API_URL, message.chat.id, reply);
		return;
	}
	await saveUserData(db, message.from.id, data);
	const reply = `–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ñ: ${data}`;
	await sendMessage(TELEGRAM_API_URL, message.chat.id, reply);
	await saveMessage(db, message.from.id, message.chat.id, 'bot', reply);
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID
export async function handleIdCommand(env, TELEGRAM_API_URL, message) {
	const reply = `–í–∞—à Telegram ID: \`${message.from.id}\``;
	await sendMessage(TELEGRAM_API_URL, message.chat.id, reply, { parse_mode: 'Markdown' });
	await saveMessage(env.DB, message.from.id, message.chat.id, 'bot', reply);
}